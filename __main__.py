from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, LabeledPrice, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

import os
import sys
import logging
import asyncio
import aiosqlite

load_dotenv()
TOKEN = os.getenv('TG_BOT_API_TOKEN')
ADMIN_ID = os.getenv('ADMIN_TG_ID')
PAYMENT_TOKEN = os.getenv('PAYMENT_TOKEN')

STAR_EMOJI = "\u2B50"
DB_PATH = r'db.sql'

prices_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text=f'100 {STAR_EMOJI} –Ω–∞ —á–∞–π', callback_data='100'),
        InlineKeyboardButton(text=f'200 {STAR_EMOJI} –Ω–∞ —à–∞–≤—É ', callback_data='200')
    ],
    [
        InlineKeyboardButton(text=f'300 {STAR_EMOJI} —Å–ø–∞—Å–∏–±–æ!', callback_data='300'),
        InlineKeyboardButton(text=f'500 {STAR_EMOJI} –°–ü–ê–°–ò–ë–û!', callback_data='500')
    ],
    [
        InlineKeyboardButton(text=f'100000 {STAR_EMOJI}\n( –ù–∞ Porshe 930 Turbo )', callback_data='porshe')
    ]
])

start_keyboard = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='–ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã'), 
        KeyboardButton(text='–í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç')
        ],
    [
        KeyboardButton(text='–ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã'), 
        KeyboardButton(text='–ü–µ—Ä–µ–≤–æ–¥—ã'),
        KeyboardButton(text='–°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏')
        ],
    [
        KeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã üí∞')
        ]
], resize_keyboard=True, one_time_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ')

k_keyboard = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='–ò–†–≠'), 
        KeyboardButton(text='–ò–≠–¢–≠'),
        KeyboardButton(text='–ò–ì–í–ò–≠'),
        ],
    [
        KeyboardButton(text='–≠–Ω–ú–ò'), 
        KeyboardButton(text='–ò–¢–ê–≠'),
        KeyboardButton(text='–ò–≠–í–¢')
        ],
    [
        KeyboardButton(text='–ò–≠–≠'), 
        KeyboardButton(text='–ò–í–¢–ò'),
        KeyboardButton(text='–ì–ü–ò')
        ], 
    [
        KeyboardButton(text='–ò–Ω–≠–ò'), 
        KeyboardButton(text='–í–ò–ò')
        ]
], resize_keyboard=True, one_time_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ–¥—Ä—É: ')

bot = Bot(TOKEN)
dp = Dispatcher()

async def create_table():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                ID INTEGER PRIMARY KEY,
                choose INTEGER DEFAULT 0
            )
        """)
        await db.commit()

async def add_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (ID, choose) VALUES (?, ?)",
            (user_id, 0)
        )
        await db.commit()

async def update_choose(user_id: int, new_value: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET choose = ? WHERE ID = ?",
            (new_value, user_id)
        )
        await db.commit()

async def get_choose(user_id: int) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT choose FROM users WHERE ID = ?",
            (user_id,)
        ) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else None

@dp.message(Command('start'))
async def start_command(message: Message):
    await message.answer('–ü–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫—É –ø–æ–ª–µ–∑–Ω–æ –∑–Ω–∞—Ç—å:', reply_markup=start_keyboard)
    await add_user(message.from_user.id)

@dp.callback_query(F.data == '100')
async def invoice_100(callback: CallbackQuery) -> None:
    await callback.message.answer_invoice(
        photo_url=r'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRoozns7G40O4jq3MIYW2rvxqFyklp-nTTaAw&s',
        title='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ–¥–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', 
        description='–í–µ–¥—å–º–∞–∫—É –∑–∞–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫–∞–Ω–æ–π...',
        currency='XTR',
        prices=[LabeledPrice(label='–í–æ –±–ª–∞–≥–æ...', amount=100)],
        protect_content=True,
        payload='100XTR',
        message_effect_id="5104841245755180586"
)
    
@dp.callback_query(F.data == '200')
async def invoice_100(callback: CallbackQuery) -> None:
    await callback.message.answer_invoice(
        photo_url=r'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRoozns7G40O4jq3MIYW2rvxqFyklp-nTTaAw&s',
        title='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ–¥–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', 
        description='–í–µ–¥—å–º–∞–∫—É –∑–∞–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫–∞–Ω–æ–π...',
        currency='XTR',
        prices=[LabeledPrice(label='–í–æ –±–ª–∞–≥–æ...', amount=200)],
        protect_content=True,
        payload='200XTR',
        message_effect_id="5104841245755180586"
)
    
@dp.callback_query(F.data == '300')
async def invoice_100(callback: CallbackQuery) -> None:
    await callback.message.answer_invoice(
        photo_url=r'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRoozns7G40O4jq3MIYW2rvxqFyklp-nTTaAw&s',
        title='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ–¥–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', 
        description='–í–µ–¥—å–º–∞–∫—É –∑–∞–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫–∞–Ω–æ–π...',
        currency='XTR',
        prices=[LabeledPrice(label='–í–æ –±–ª–∞–≥–æ...', amount=300)],
        protect_content=True,
        payload='300XTR',
        message_effect_id="5104841245755180586"
)
    
@dp.callback_query(F.data == '500')
async def invoice_100(callback: CallbackQuery) -> None:
    await callback.message.answer_invoice(
        photo_url=r'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRoozns7G40O4jq3MIYW2rvxqFyklp-nTTaAw&s',
        title='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ–¥–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', 
        description='–í–µ–¥—å–º–∞–∫—É –∑–∞–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫–∞–Ω–æ–π...',
        currency='XTR',
        prices=[LabeledPrice(label='–í–æ –±–ª–∞–≥–æ...', amount=500)],
        protect_content=True,
        payload='500XTR',
        message_effect_id="5104841245755180586"
)
    
@dp.callback_query(F.data == 'porshe')
async def invoice_100(callback: CallbackQuery) -> None:
    await callback.message.answer_invoice(
        photo_url=r'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRoozns7G40O4jq3MIYW2rvxqFyklp-nTTaAw&s',
        title='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ–¥–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', 
        description='–í–µ–¥—å–º–∞–∫—É –∑–∞–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫–∞–Ω–æ–π...',
        currency='XTR',
        prices=[LabeledPrice(label='–í–æ –±–ª–∞–≥–æ...', amount=100000)],
        protect_content=True,
        payload='porshe',
        message_effect_id="5104841245755180586"
)

@dp.message(F.text == '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã üí∞')
async def choose_price(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è', reply_markup=start_keyboard)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è', reply_markup=prices_keyboard)

@dp.message(F.text == '.')
async def worker_1(message: Message):
    await message.answer(f'–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º: \n\n{message.from_user}')

@dp.message(F.text == '–ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã')
async def worker_2(message: Message):
    await update_choose(message.from_user.id, 1)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç: ', reply_markup=k_keyboard)


@dp.message(F.text == '–ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã')
async def worker_4(message: Message):
    await update_choose(message.from_user.id, 2)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç: ', reply_markup=k_keyboard)


@dp.message(F.text == '–ü–µ—Ä–µ–≤–æ–¥—ã')
async def worker_5(message: Message):
    await update_choose(message.from_user.id, 3)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç: ', reply_markup=k_keyboard)


@dp.message(F.text == '–°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏')
async def worker_6(message: Message):
    await update_choose(message.from_user.id, 4)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç: ', reply_markup=k_keyboard)

@dp.message(F.text == '–í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç')
async def worker_7(message: Message):
    await update_choose(message.from_user.id, 5)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç: ', reply_markup=k_keyboard)

@dp.message(F.text == '–ò–†–≠')
async def worker_8(message: Message):
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –ò–†–≠', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –ò–†–≠', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ò–†–≠', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –ò–†–≠', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –ò–†–≠', reply_markup=start_keyboard)

    

@dp.message(F.text == '–ò–≠–¢–≠')
async def worker_9(message: Message):
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –ò–≠–¢–≠', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –ò–≠–¢–≠', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ò–≠–¢–≠', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –ò–≠–¢–≠', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –ò–≠–¢–≠', reply_markup=start_keyboard)

@dp.message(F.text == '–ò–ì–í–ò–≠')
async def worker_10(message: Message):
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –ò–ì–í–ò–≠', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –ò–ì–í–ò–≠', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ò–ì–í–ò–≠', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –ò–ì–í–ò–≠', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –ò–ì–í–ò–≠', reply_markup=start_keyboard)

@dp.message(F.text == '–≠–Ω–ú–ò')
async def worker_11(message: Message):
    
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –≠–Ω–ú–ò', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –≠–Ω–ú–ò', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≠–Ω–ú–ò', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –≠–Ω–ú–ò', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –≠–Ω–ú–ò', reply_markup=start_keyboard)
    

@dp.message(F.text == '–ò–¢–ê–≠')
async def worker_12(message: Message):
    
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –ò–¢–ê–≠', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –ò–¢–ê–≠', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ò–¢–ê–≠', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –ò–¢–ê–≠', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –ò–¢–ê–≠', reply_markup=start_keyboard)
    
@dp.message(F.text == '–ò–≠–í–¢')
async def worker_13(message: Message):
    
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –ò–≠–í–¢', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –ò–≠–í–¢', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ò–≠–í–¢', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –ò–≠–í–¢', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –ò–≠–í–¢', reply_markup=start_keyboard)

@dp.message(F.text == '–ò–≠–≠')
async def worker_14(message: Message):
    
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –ò–≠–≠', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –ò–≠–≠', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ò–≠–≠', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –ò–≠–≠', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –ò–≠–≠', reply_markup=start_keyboard)

@dp.message(F.text == '–ò–í–¢–ò')
async def worker_15(message: Message):
    
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –ò–í–¢–ò', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –ò–í–¢–ò', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ò–í–¢–ò', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –ò–í–¢–ò', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –ò–í–¢–ò', reply_markup=start_keyboard)


@dp.message(F.text == '–ì–ü–ò')
async def worker_16(message: Message):
    
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –ì–ü–ò', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –ì–ü–ò', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ì–ü–ò', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –ì–ü–ò', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –ì–ü–ò', reply_markup=start_keyboard)


@dp.message(F.text == '–ò–Ω–≠–ò')
async def worker_17(message: Message):
    
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –ò–Ω–≠–ò', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –ò–Ω–≠–ò', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ò–Ω–≠–ò', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –ò–Ω–≠–ò', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –ò–Ω–≠–ò', reply_markup=start_keyboard)

@dp.message(F.text == '–í–ò–ò')
async def worker_18(message: Message):
    
    choose = await get_choose(message.from_user.id)
    match choose:
        case 1: await message.answer('–¢–µ–º–∞: –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è –í–ò–ò', reply_markup=start_keyboard)
        case 2: await message.answer('–¢–µ–º–∞: –ó–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –í–ò–ò', reply_markup=start_keyboard)
        case 3: await message.answer('–¢–µ–º–∞: –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –í–ò–ò', reply_markup=start_keyboard)
        case 4: await message.answer('–¢–µ–º–∞: –°–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏ –¥–ª—è –í–ò–ò', reply_markup=start_keyboard)
        case 5: await message.answer('–¢–µ–º–∞: –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏ —Å–ø–æ—Ä—Ç –¥–ª—è –í–ò–ò', reply_markup=start_keyboard)

async def main() -> None:
    print('started')
    await create_table()
    await dp.start_polling(bot)
    

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())